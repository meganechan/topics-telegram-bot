import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as TelegramBot from 'node-telegram-bot-api';
import { UsersService } from '../users/users.service';
import { GroupsService } from '../groups/groups.service';
import { TicketService } from '../ticket/ticket.service';
import { TopicsService } from '../topics/topics.service';

@Injectable()
export class BotService implements OnModuleInit {
  private bot: TelegramBot;

  constructor(
    private configService: ConfigService,
    private usersService: UsersService,
    private groupsService: GroupsService,
    private ticketService: TicketService,
    private topicsService: TopicsService,
  ) {
    const botToken = this.configService.get<string>('telegram.botToken');
    if (!botToken) {
      throw new Error('TELEGRAM_BOT_TOKEN is required');
    }
    this.bot = new TelegramBot(botToken, { polling: true });
  }

  async onModuleInit() {
    this.setupCommands();
    console.log('Telegram bot started successfully');
  }

  async createForumTopic(chatId: string, name: string, iconColor?: number, iconCustomEmojiId?: string) {
    try {
      const apiParams: any = {
        chat_id: chatId,
        name,
      };

      if (iconColor) {
        apiParams.icon_color = iconColor as any;
      }

      if (iconCustomEmojiId) {
        apiParams.icon_custom_emoji_id = iconCustomEmojiId;
      }

      // Note: createForumTopic might not be available in node-telegram-bot-api
      // Use the _request method to make a raw API call
      const result = await (this.bot as any)._request('createForumTopic', { form: apiParams });
      return result;
    } catch (error) {
      console.error('Error creating forum topic:', error);
      throw error;
    }
  }

  async closeForumTopic(chatId: string, messageThreadId: number) {
    try {
      // Note: closeForumTopic might not be available in node-telegram-bot-api
      const result = await (this.bot as any)._request('closeForumTopic', { 
        form: {
          chat_id: chatId,
          message_thread_id: messageThreadId,
        }
      });
      return result;
    } catch (error) {
      console.error('Error closing forum topic:', error);
      throw error;
    }
  }

  async sendMessageToTopic(chatId: string, messageThreadId: number, text: string, options?: any) {
    try {
      const sendOptions: any = {
        message_thread_id: messageThreadId,
        ...options,
      };

      // Explicitly remove parse_mode to avoid markdown parsing issues
      delete sendOptions.parse_mode;

      console.log('Debug sendOptions before sending:', JSON.stringify(sendOptions, null, 2));
      console.log('Debug text content:', text);

      const result = await this.bot.sendMessage(chatId, text, sendOptions);
      return result;
    } catch (error) {
      console.error('Error sending message to topic:', error);
      throw error;
    }
  }

  async checkBotPermissions(chatId: string): Promise<{ isAdmin: boolean; canManageTopics: boolean }> {
    try {
      const me = await this.bot.getMe();
      const botInfo = await this.bot.getChatMember(chatId, me.id);
      const isAdmin = botInfo.status === 'administrator';

      let canManageTopics = false;
      if (isAdmin && 'can_manage_topics' in botInfo) {
        canManageTopics = (botInfo as any).can_manage_topics === true;
      }

      return { isAdmin, canManageTopics };
    } catch (error) {
      console.error('Error checking bot permissions:', error);
      return { isAdmin: false, canManageTopics: false };
    }
  }

  private setupCommands() {
    this.bot.onText(/\/start/, this.handleStart.bind(this));
    this.bot.onText(/\/create_ticket(.*)/, this.handleCreateTicket.bind(this));
    this.bot.onText(/\/close_ticket/, this.handleCloseTicket.bind(this));
    this.bot.onText(/\/mention(.*)/, this.handleMention.bind(this));

    this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
    this.bot.on('my_chat_member', this.handleChatMemberUpdate.bind(this));
    this.bot.on('message', this.handleMessage.bind(this));
  }

  private async handleCallbackQuery(callbackQuery: TelegramBot.CallbackQuery) {
    const data = callbackQuery.data;

    if (data?.startsWith('mention:')) {
      if (data === 'mention:cancel') {
        await this.handleMentionCancel(callbackQuery);
      } else {
        const username = data.replace('mention:', '');
        await this.handleMentionCallback(callbackQuery, username);
      }
    }
  }

  private async handleMentionCallback(callbackQuery: TelegramBot.CallbackQuery, username: string) {
    try {
      // Delete the original message
      if (callbackQuery.message) {
        await this.bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id).catch(() => {});
      }

      const message = callbackQuery.message;
      const messageThreadId = (message as any)?.message_thread_id;
      const chat = message?.chat;
      const user = callbackQuery.from;

      if (!messageThreadId || !chat || !user) {
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
        return;
      }

      // Check topic and ticket
      const topic = await this.topicsService.findByTelegramTopicId(messageThreadId, chat.id.toString());
      if (!topic || !topic.ticketId) {
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Topic ‡∏ô‡∏µ‡πâ' });
        return;
      }

      const ticket = await this.ticketService.findByTicketId(topic.ticketId);
      if (!ticket) {
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket' });
        return;
      }

      if (ticket.status === 'closed') {
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Ticket ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß' });
        return;
      }

      // Find user in system
      const targetUser = await this.usersService.findByUsername(username);
      if (!targetUser) {
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö User: ${username}` });
        return;
      }

      // Check if user is already in topic
      if (topic.participants.includes(targetUser.telegramId)) {
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: `‚ÑπÔ∏è ${username} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Topic ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß` });
        return;
      }

      // Add user as participant
      await this.topicsService.addParticipant(messageThreadId, chat.id.toString(), targetUser.telegramId);

      // Send mention message in topic
      const mentionMessage =
        `‚úÖ ‡πÄ‡∏ä‡∏¥‡∏ç @${username} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Ticket ‡πÅ‡∏•‡πâ‡∏ß\n` +
        `üé´ Ticket: ${ticket.ticketId}\n` +
        `üìù ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${ticket.title}\n` +
        `üë§ ‡πÄ‡∏ä‡∏¥‡∏ç‡πÇ‡∏î‡∏¢: ${user.first_name}\n\n` +
        `üí¨ @${username} ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏ô Topic ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`;

      await this.sendMessageToTopic(
        chat.id.toString(),
        messageThreadId,
        mentionMessage
      );

      await this.bot.answerCallbackQuery(callbackQuery.id, { text: `‚úÖ ‡πÄ‡∏ä‡∏¥‡∏ç ${username} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });

    } catch (error) {
      console.error('Error handling mention callback:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
    }
  }

  private async handleMentionCancel(callbackQuery: TelegramBot.CallbackQuery) {
    try {
      // Delete message
      if (callbackQuery.message) {
        await this.bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id).catch(() => {});
      }
      await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    } catch (error) {
      console.error('Error handling mention cancel:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
    }
  }

  private async handleStart(msg: TelegramBot.Message, match: RegExpExecArray) {
    console.log('handleStart', msg);

    if (msg.chat?.type === 'private') {
      await this.bot.sendMessage(msg.chat.id,
        'üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô Telegram Ticket Support Bot\n\n' +
          'üé´ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏â‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n' +
          'üìã ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /create_ticket ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡πÉ‡∏´‡∏°‡πà'
      );
    } else {
      const user = msg.from;
      if (user) {
        await this.usersService.findOrCreateUser({
          telegramId: user.id.toString(),
          username: user.username || user.first_name || 'Unknown',
          firstName: user.first_name,
          lastName: user.last_name,
          isBot: user.is_bot,
          languageCode: user.language_code,
        });
      }

      await this.bot.sendMessage(msg.chat.id,
        '‚úÖ Bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß!\n\n' +
          'üé´ ‡πÉ‡∏ä‡πâ /create_ticket <‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠> [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á ticket'
      );
    }
  }

  private async handleCreateTicket(msg: TelegramBot.Message, match: RegExpExecArray) {
    const text = msg.text || '';
    const args = text.split(' ').slice(1);

    if (args.length === 0) {
      await this.bot.sendMessage(msg.chat.id,
        '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ticket\n\n' +
          'üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /create_ticket ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ'
      );
      return;
    }

    // ‡πÅ‡∏¢‡∏Å title ‡πÅ‡∏•‡∏∞ description ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const titleMatch = text.match(/\/create_ticket\s+(.+)/);
    if (!titleMatch) {
      await this.bot.sendMessage(msg.chat.id, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ticket');
      return;
    }

    const fullText = titleMatch[1];
    const words = fullText.split(' ');
    const title = words[0];
    const description = words.slice(1).join(' ') || undefined;

    const user = msg.from;
    const chat = msg.chat;

    if (!user || !chat || chat.type === 'private') {
      await this.bot.sendMessage(msg.chat.id, '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô supergroup ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö topics
      if (chat.type !== 'supergroup') {
        await this.bot.sendMessage(msg.chat.id,
          '‚ùå Ticket ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Supergroup ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ Topics ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô\n\n' +
            'üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô Supergroup ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ Topics'
        );
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå bot ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      const permissions = await this.checkBotPermissions(chat.id.toString());

      if (!permissions.isAdmin) {
        await this.bot.sendMessage(msg.chat.id,
          '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡πÑ‡∏î‡πâ\n' +
            'üîß Bot ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ\n\n' +
            'üë§ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ Admin ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ Bot'
        );
        return;
      }

      if (!permissions.canManageTopics) {
        await this.bot.sendMessage(msg.chat.id,
          '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Topic ‡πÑ‡∏î‡πâ\n' +
            'üîß Bot ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Topics\n\n' +
            'üìã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ Admin ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå:\n' +
            '‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ Topics ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°\n' +
            '‚Ä¢ ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå "Manage Topics" ‡∏Å‡∏±‡∏ö Bot'
        );
        return;
      }

      const group = await this.groupsService.findOrCreateGroup({
        telegramGroupId: chat.id.toString(),
        title: (chat as any).title || 'Unknown Group',
        type: chat.type,
        botIsAdmin: permissions.isAdmin,
        supportTopicsEnabled: true,
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const ticket = await this.ticketService.createTicket({
        title,
        description,
        createdBy: user.id.toString(),
        groupId: chat.id.toString(),
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á forum topic
      const topicName = `üé´ ${ticket.ticketId}: ${title}`;
      const topicResult = await this.createForumTopic(chat.id.toString(), topicName);

      if (topicResult && topicResult.message_thread_id) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ticket ‡∏î‡πâ‡∏ß‡∏¢ topic ID
        await this.ticketService.linkTicketToTopic(ticket.ticketId, topicResult.message_thread_id);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á topic ‡πÉ‡∏ô database
        await this.topicsService.createTopic({
          telegramTopicId: topicResult.message_thread_id,
          name: topicName,
          groupId: chat.id.toString(),
          ticketId: ticket.ticketId,
          participants: [user.id.toString()],
        });

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÉ‡∏ô topic
        const welcomeMessage =
          `üìã Ticket: ${ticket.ticketId}\n` +
          `üìù ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${ticket.title}\n` +
          `üë§ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: ${user.first_name}\n` +
          `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleString('th-TH')}\n` +
          (description ? `\nüìñ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${description}\n` : '') +
          `\n‚ö° ‡πÉ‡∏ä‡πâ /close_ticket ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î Ticket` +
          `\n‚ö° ‡πÉ‡∏ä‡πâ /mention @username ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°`;

        await this.sendMessageToTopic(
          chat.id.toString(),
          topicResult.message_thread_id,
          welcomeMessage
        );

        await this.bot.sendMessage(msg.chat.id,
          `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n` +
            `üé´ Ticket ID: ${ticket.ticketId}\n` +
            `üìù ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${ticket.title}\n` +
            `üìã Topic: ${topicName}\n` +
            `üë§ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: ${user.first_name}\n\n` +
            `üí¨ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Topic ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Ticket ‡∏ô‡∏µ‡πâ`
        );
      } else {
        throw new Error('Failed to create forum topic');
      }

    } catch (error) {
      console.error('Error creating ticket:', error);

      if (error.message?.includes('CHAT_NOT_MODIFIED') || error.message?.includes('topics')) {
        await this.bot.sendMessage(msg.chat.id,
          '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Topic ‡πÑ‡∏î‡πâ\n' +
            'üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤:\n' +
            '‚Ä¢ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô Supergroup\n' +
            '‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ Topics ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°\n' +
            '‚Ä¢ Bot ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Topics'
        );
      } else {
        await this.bot.sendMessage(msg.chat.id,'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
    }
  }

  private async handleCloseTicket(msg: TelegramBot.Message, match: RegExpExecArray) {
    const message = msg;
    const user = msg.from;
    const chat = msg.chat;

    if (!user || !chat || chat.type === 'private') {
      await this.bot.sendMessage(msg.chat.id,'‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô topic ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const messageThreadId = message?.message_thread_id;
    if (!messageThreadId) {
      await this.bot.sendMessage(msg.chat.id,'‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Topic ‡∏Ç‡∏≠‡∏á Ticket ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    try {
      // ‡∏´‡∏≤ ticket ‡∏à‡∏≤‡∏Å topic ID
      const ticket = await this.ticketService.findByTopicId(messageThreadId);
      if (!ticket) {
        await this.bot.sendMessage(msg.chat.id,'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Topic ‡∏ô‡∏µ‡πâ');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ticket ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (ticket.status === 'closed') {
        await this.bot.sendMessage(msg.chat.id,'‚ÑπÔ∏è Ticket ‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î ticket (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ admin)
      const isCreator = ticket.createdBy === user.id.toString();
      const group = await this.groupsService.findByTelegramGroupId(chat.id.toString());

      if (!isCreator && !group?.botIsAdmin) {
        await this.bot.sendMessage(msg.chat.id,'‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏¥‡∏î Ticket ‡∏ô‡∏µ‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)');
        return;
      }

      // ‡∏õ‡∏¥‡∏î ticket
      const closedTicket = await this.ticketService.closeTicket(ticket.ticketId);

      // ‡∏õ‡∏¥‡∏î forum topic
      await this.closeForumTopic(chat.id.toString(), messageThreadId);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó topic status ‡πÉ‡∏ô database
      await this.topicsService.deactivateTopic(messageThreadId, chat.id.toString());

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà ticket ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
      const createdAt = new Date((ticket as any).createdAt);
      const closedAt = new Date();
      const duration = Math.round((closedAt.getTime() - createdAt.getTime()) / (1000 * 60 * 60)); // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
      const closeMessage =
        `‚úÖ *Ticket ${ticket.ticketId} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß*\n\n` +
        `üìÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${closedAt.toLocaleString('th-TH')}\n` +
        `üë§ ‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢: ${user.first_name}\n` +
        `‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${duration > 0 ? duration + ' ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á' : '‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á'}\n\n` +
        `üîí Topic ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ`;

      await this.bot.sendMessage(msg.chat.id, closeMessage, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('Error closing ticket:', error);

      if (error.message?.includes('TOPIC_CLOSED')) {
        await this.bot.sendMessage(msg.chat.id,'‚ÑπÔ∏è Topic ‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
      } else {
        await this.bot.sendMessage(msg.chat.id,'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Ticket ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
    }
  }

  private async handleMention(msg: TelegramBot.Message, match: RegExpExecArray) {
    const message = msg;
    const text = message?.text || '';
    const args = text.split(' ').slice(1);
    const user = msg.from;
    const chat = msg.chat;

    if (!user || !chat || chat.type === 'private') {
      await this.bot.sendMessage(msg.chat.id,'‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô topic ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const messageThreadId = message?.message_thread_id;
    if (!messageThreadId) {
      await this.bot.sendMessage(msg.chat.id,'‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Topic ‡∏Ç‡∏≠‡∏á Ticket ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    if (args.length === 0) {
      // ‡πÅ‡∏™‡∏î‡∏á reply markup ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      await this.showUserSelectionMenu(msg, messageThreadId, chat.id.toString());
      return;
    }

    // ‡πÅ‡∏¢‡∏Å username (‡∏•‡∏ö @ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const targetUsername = args[0].replace('@', '');

    try {
      // ‡∏´‡∏≤ topic ‡πÅ‡∏•‡∏∞ ticket
      const topic = await this.topicsService.findByTelegramTopicId(messageThreadId, chat.id.toString());
      if (!topic || !topic.ticketId) {
        await this.bot.sendMessage(msg.chat.id,'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Topic ‡∏ô‡∏µ‡πâ');
        return;
      }

      const ticket = await this.ticketService.findByTicketId(topic.ticketId);
      if (!ticket) {
        await this.bot.sendMessage(msg.chat.id,'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket');
        return;
      }

      if (ticket.status === 'closed') {
        await this.bot.sendMessage(msg.chat.id,'‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Ticket ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        return;
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      const targetUser = await this.usersService.findByUsername(targetUsername);
      if (!targetUser) {
        await this.bot.sendMessage(msg.chat.id,
          `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö User: ${targetUsername}\n` +
            'üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n' +
            'üí° User ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Bot ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô'
        );
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô topic ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (topic.participants.includes(targetUser.telegramId)) {
        await this.bot.sendMessage(msg.chat.id,`‚ÑπÔ∏è ${targetUsername} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Topic ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß`);
        return;
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏õ‡πá‡∏ô participant
      await this.topicsService.addParticipant(messageThreadId, chat.id.toString(), targetUser.telegramId);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô topic
      const mentionMessage =
        `‚úÖ ‡πÄ‡∏ä‡∏¥‡∏ç @${targetUsername} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Ticket ‡πÅ‡∏•‡πâ‡∏ß\n` +
        `üé´ Ticket: ${ticket.ticketId}\n` +
        `üìù ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${ticket.title}\n` +
        `üë§ ‡πÄ‡∏ä‡∏¥‡∏ç‡πÇ‡∏î‡∏¢: ${user.first_name}\n\n` +
        `üí¨ @${targetUsername} ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏ô Topic ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`;

      await this.sendMessageToTopic(
        chat.id.toString(),
        messageThreadId,
        mentionMessage
      );

    } catch (error) {
      console.error('Error handling mention:', error);
      await this.bot.sendMessage(msg.chat.id,'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç User ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  }

  private async showUserSelectionMenu(msg: TelegramBot.Message, messageThreadId: number, groupId: string) {
    try {
      // ‡∏´‡∏≤ topic ‡πÅ‡∏•‡∏∞ participants ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const topic = await this.topicsService.findByTelegramTopicId(messageThreadId, groupId);
      if (!topic) {
        await this.bot.sendMessage(msg.chat.id,'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Topic');
        return;
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô topic ‡πÅ‡∏•‡πâ‡∏ß)
      const availableUsers = await this.usersService.findAllActiveUsers(topic.participants);

      if (availableUsers.length === 0) {
        await this.bot.sendMessage(msg.chat.id,
          '‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ\n\n' +
            'üí° ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Topic ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
        );
        return;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á inline keyboard
      const buttons = [];

      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß
      for (let i = 0; i < availableUsers.length; i += 2) {
        const row = [];

        const user1 = availableUsers[i];
        const displayName1 = user1.firstName || user1.username;
        row.push({
          text: `üë§ ${displayName1}`,
          callback_data: `mention:${user1.username}`
        });

        if (i + 1 < availableUsers.length) {
          const user2 = availableUsers[i + 1];
          const displayName2 = user2.firstName || user2.username;
          row.push({
            text: `üë§ ${displayName2}`,
            callback_data: `mention:${user2.username}`
          });
        }

        buttons.push(row);
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
      buttons.push([{
        text: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        callback_data: 'mention:cancel'
      }]);

      const inlineKeyboard = { inline_keyboard: buttons };

      await this.bot.sendMessage(msg.chat.id,
        `üë• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Topic\n\n` +
          `üìã ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ: ${availableUsers.length} ‡∏Ñ‡∏ô`,
        { reply_markup: inlineKeyboard }
      );

    } catch (error) {
      console.error('Error showing user selection menu:', error);
      await this.bot.sendMessage(msg.chat.id,'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }
  }



  private async handleChatMemberUpdate(update: any) {
    const chat = update.chat;

    if (update?.new_chat_member?.user?.id) {
      const me = await this.bot.getMe();
      if (update.new_chat_member.user.id === me.id) {
        const status = update.new_chat_member.status;
        const isAdmin = status === 'administrator';

        if (chat) {
          await this.groupsService.findOrCreateGroup({
            telegramGroupId: chat.id.toString(),
            title: chat.title || 'Unknown Group',
            type: chat.type,
            botIsAdmin: isAdmin,
            supportTopicsEnabled: (chat as any).has_topics_enabled || false,
          });
        }
      }
    }
  }

  private async handleMessage(msg: TelegramBot.Message) {
    const message = msg;
    const user = msg.from;

    if (user && msg.chat?.type !== 'private') {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó user ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await this.usersService.findOrCreateUser({
        telegramId: user.id.toString(),
        username: user.username || user.first_name || 'Unknown',
        firstName: user.first_name,
        lastName: user.last_name,
        isBot: user.is_bot,
        languageCode: user.language_code,
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô topic ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const messageThreadId = message?.message_thread_id;
      if (messageThreadId) {
        await this.handleTopicMessage(msg, messageThreadId);
      }
    }
  }

  private async handleTopicMessage(msg: TelegramBot.Message, messageThreadId: number) {
    const message = msg;
    const user = msg.from;
    const chat = msg.chat;

    if (!user || !chat) return;

    try {
      // ‡∏´‡∏≤ topic ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const topic = await this.topicsService.findByTelegramTopicId(messageThreadId, chat.id.toString());
      if (!topic) return;

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏õ‡πá‡∏ô participant ‡πÉ‡∏ô topic (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
      if (!topic.participants.includes(user.id.toString())) {
        await this.topicsService.addParticipant(messageThreadId, chat.id.toString(), user.id.toString());
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô database (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Phase 4)
      console.log(`Message in topic ${messageThreadId}: ${message.text || 'non-text message'}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ topic ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö ticket ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (topic.ticketId) {
        const ticket = await this.ticketService.findByTicketId(topic.ticketId);
        if (ticket && ticket.status === 'closed') {
          // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤ ticket ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
          const now = Date.now();
          const lastWarning = (this as any).lastClosedWarning || 0;

          if (now - lastWarning > 60000) { // ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
            await this.bot.sendMessage(msg.chat.id,'‚ÑπÔ∏è Ticket ‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ');
            (this as any).lastClosedWarning = now;
          }
        }
      }

    } catch (error) {
      console.error('Error handling topic message:', error);
    }
  }
}